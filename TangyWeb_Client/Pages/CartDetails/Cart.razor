@page "/cart"
@using Blazored.LocalStorage;
@inject ILocalStorageService _localStorage
@inject IProductService _productService
@inject ICartService _cartService
@inject NavigationManager _navi
@inject MyPopup myPopup
@inject IJSRuntime _jsRuntime


@if (IsProcessing)
{
	<div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
		<img src="image/ajax-loader.gif" />
	</div>
}
else
{
	@if (!ShoppingCart.Any())
	{
		<div class="alert alert-info empty-cart" role="alert">
			<h4 class="alert-heading">Giỏ hàng của bạn đang trống!</h4>
			<p class="mb-0">Hãy thêm sản phẩm để trải nghiệm mua sắm tuyệt vời của chúng tôi.</p>
		</div>
	}
	else
	{
		<div class="container mt-4" style="padding-bottom:100px;">
			<div class="card">
				<div class="card-header text-light ml-0 " style="background-color: rgba(0, 0, 0, 0.05);">
					<div class="row">
						<div class="col-6  pt-2  text-dark" style="font-size: 20px;font-style: oblique;">
							Giỏ hàng
						</div>
						<div class="col-6 col-md-3 offset-md-3 text-end">
							<a href="/" class="btn btn-secondary ">Tiếp tục mua sắm</a>
						</div>
					</div>
				</div>
				<div class="card-body">

					@foreach (var item in ShoppingCart)
					{

						<div class="row mobifix">
							<div class="col-3 col-md-1 text-center py-2">
								<img src="@item.Product.ImageUrl" class="rounded" width="100%" />
							</div>
							<div class="col-9 text-sm-center text-md-start col-md-4 pt-lg-1 " style="display: flex;
    justify-content: center;
    align-items: center;">
								<h4 style="padding-bottom:0;"><strong>@item.Product.Name</strong></h4>

								<div class="badge bg-primary text-center" style="font-size:16px;">
									@item.Product.Category.Name
								</div>
								
							</div>
							<div class="col-12 text-sm-center col-md-7 text-md-start row  pt-lg-3 mt-3">
								<div class="col-4 pt-1 ">

									<h6><strong>@item.ProductPrice.Price Vnđ <span class="text-muted">x</span> @item.Count </strong></h6>
								</div>
								<div class="col-6 col-sm-4 col-lg-6">
									<button @onclick="()=>Increment(item.ProductId,item.ProductPriceId,1)" type="submit" class="btn btn-primary">
										<i class="bi bi-plus-square"></i>
									</button>
									<button @onclick="()=>Decrement(item.ProductId,item.ProductPriceId,1)" type="submit" class="btn btn-warning mobifixtru">
										<i class="bi bi-dash-square"></i>
									</button>
								</div>
								<div class="col-2 col-sm-4 col-lg-2 text-right">
									<button @onclick="()=>Decrement(item.ProductId,item.ProductPriceId,0)" type="submit" class="btn btn-outline-danger">
										<i class="bi bi-trash-fill"></i>
									</button>
								</div>
							</div>
						</div>
					}
					<hr />

					<div class="row">
						<div class="col-12 col-md-5">
						</div>
						<div class="col-12 col-md-6 offset-md-1 col-lg-4 offset-lg-3 pr-4">
							<ul class="list-group">
								<li class="list-group-item d-flex justify-content-between bg-light">
									<span class="text-info"> Tổng tiền (Vnđ)</span>
									<strong class="text-info">@OrderTotal Vnđ</strong>
								</li>
							</ul>
						</div>
					</div>


				</div>
				<div class="card-footer">
					<div class="col-12 col-md-3 offset-md-9">
						@if (CanProceedToCheckout)
						{
							<button class="btn btn-primary form-control" @onclick="ShowModal">Thanh toán</button>
						}
						else
						{
							<button class="btn btn-primary form-control" disabled>Thanh toán</button>
						}
					</div>
				</div>
			</div>
		</div>
	

	}
	<div class="overlay" style="display: @(IsModalVisible ? "block" : "none")"></div>
	<div class="modal" tabindex="-1" style="display: @(IsModalVisible ? "block" : "none")">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" style="    color: red;
    font-weight: 800;">
						Phương thức thanh toán
					</h5>
					<button type="button" class="close" @onclick="CloseModal" style="font-size: 36px;border: navajowhite;padding: 0px 14px;border-radius: 12px;">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<span style="color:red;font-size:18px;">(1)</span> <a href="cashpayment" class="tienmat" style="color:#653f5c;font-size:18px;">Thanh toán tiền mặt</a>
					<br>
					<div style="padding-top: 16px;">
						<span style="color:red;font-size:18px;">(2)</span> <a href="summary" class="the" style="color:#653f5c;font-size:18px;">Thanh toán bằng thẻ</a>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-danger" @onclick="CloseModal">Trở về</button>
				</div>
			</div>
		</div>
	</div>
	<Footer></Footer>


}
@code {
	private bool IsModalVisible = false;
	private bool CanProceedToCheckout = true;
	private async void ShowModal()
	{
		if (CanProceedToCheckout)
		{
			IsModalVisible = true;
		}
		else 
		{
			await _jsRuntime.ToastrError("Số lượng sản phẩm trong giỏ hàng vượt quá số lượng có sẵn trong kho.");
		}
	}

	private void CloseModal()
	{
		IsModalVisible = false;
	}
	public bool IsProcessing { get; set; } = false;
	private List<ShoppingCart> ShoppingCart = new List<ShoppingCart>();
	private IEnumerable<ProductDTO> Products { get; set; }
	private double OrderTotal { get; set; } = 0;
	protected override async Task OnInitializedAsync()
	{
		IsProcessing = true;
		Products = await _productService.GetAll();
		await LoadCart();
		IsProcessing = false;
	}
	private async Task LoadCart()
	{
		OrderTotal = 0;
		ShoppingCart = await _localStorage.GetItemAsync<List<ShoppingCart>>(SD.ShoppingCart);
		if (ShoppingCart == null)
		{
			ShoppingCart = new List<ShoppingCart>();
			// Xử lý khi giỏ hàng không có dữ liệu
			return;
		}

		// Tính tổng số lượng sản phẩm trong giỏ hàng
		int totalItemsInCart = ShoppingCart.Sum(item => item.Count);
		// Lặp qua từng sản phẩm trong giỏ hàng để kiểm tra số lượng có sẵn trong kho
		int totalItemsAvailableInStock = 0;
		foreach (var cartItem in ShoppingCart)
		{
			int quantityInCart = await _cartService.GetQuantityInCart(cartItem.ProductId);
			totalItemsAvailableInStock += quantityInCart;
		}

		// Kiểm tra nếu tổng số lượng sản phẩm trong giỏ hàng vượt quá số lượng có sẵn trong kho
		CanProceedToCheckout = totalItemsInCart <= totalItemsAvailableInStock;

		foreach (var cart in ShoppingCart)
		{
			cart.Product = Products.FirstOrDefault(u => u.Id == cart.ProductId);
			cart.ProductPrice = cart.Product.ProductPrices.FirstOrDefault(u => u.Id == cart.ProductPriceId);
			OrderTotal += (cart.ProductPrice.Price * cart.Count);
		}
	}


	public async Task<int> GetQuantityInCart(int productId)
	{
		int quantityInCart = await _cartService.GetQuantityInCart(productId);
		return quantityInCart;
	}


	private async Task Increment(int ProductId, int ProductPriceId, int Count)
	{
		IsProcessing = true;

		// Kiểm tra số lượng sản phẩm trong giỏ hàng đã vượt quá số lượng có sẵn trong kho chưa
		var quantityInCart = await _cartService.GetQuantityInCart(ProductId);
		var product = await _productService.Get(ProductId);
		if (quantityInCart + Count > product.Quantity)
		{
			await _jsRuntime.ToastrError("Số lượng sản phẩm trong giỏ hàng vượt quá số lượng có sẵn trong kho.");
		}
		else
		{
			await _cartService.InCrementCart(new()
				{
					Count = Count,
					ProductId = ProductId,
					ProductPriceId = ProductPriceId
				});
			await LoadCart(); // Cập nhật lại giỏ hàng sau khi thay đổi
		}

		IsProcessing = false;
	}

	private async Task Decrement(int ProductId, int ProductPriceId, int Count)
	{
		IsProcessing = true;

		// Kiểm tra số lượng sản phẩm đã giảm về 0 chưa
		var quantityInCart = await _cartService.GetQuantityInCart(ProductId);
		if (quantityInCart - Count < 0)
		{
			await _jsRuntime.ToastrError("Số lượng sản phẩm trong giỏ hàng không thể giảm dưới 0.");
		}
		else
		{
			await _cartService.DeCrementCart(new()
				{
					Count = Count,
					ProductId = ProductId,
					ProductPriceId = ProductPriceId
				});
			await LoadCart(); // Cập nhật lại giỏ hàng sau khi thay đổi
		}

		IsProcessing = false;
	}






}
