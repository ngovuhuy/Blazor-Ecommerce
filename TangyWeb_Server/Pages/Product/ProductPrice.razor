@page "/product/price/{Id:int}"
@inject IProductRepository _productRepository
@inject IProductPriceRepository _productPriceRepository
@inject IJSRuntime _jsRuntime
@using Syncfusion.Blazor.Grids
@attribute [Authorize]
<h3 class="card-title text-primary mb-3 ml-3">Product Price Management</h3>
@if (IsLoading)
{
    <div class="text-center">
        <img src="/image/loading.gif" />
    </div>
}
else
{
    <div class="row border p-2 mb-4">
        <div class="col-11">
            <div class="card-body">
                <h4>@Product.Name</h4>
                <span>Category: @Product.Category.Name</span> <br />
                Description: <span>@Product.Description</span>
            </div>
        </div>

        <div class="col-1">
            <img src="@Product.ImageUrl" class="w-100" />
        </div>
    </div>

    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Id</th>
                <th>Size</th>
                <th>Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var productPrice in ProductPrices)
            {
                <tr>
                    <td>@productPrice.Id</td>
                    <td>@productPrice.Size</td>
                    <td>@productPrice.Price.ToString("N0") VNĐ</td>
                    <td>
                       
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteProductPrice(productPrice)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div>
        <h4>Add New Product Price</h4>
        <form @onsubmit="AddProductPrice">
            <div class="form-group">
                <label for="size">Size</label>
                <select class="form-control" @bind="newProductPrice.Size">
                    @foreach (var size in SizeList)
                    {
                        <option value="@size">@size</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="price">Price</label>
                <input type="number" class="form-control" @bind="newProductPrice.Price">
            </div>
            <button type="submit" class="btn btn-primary">Add</button>
        </form>
    </div>

}


@code {
    [Parameter]
    public int Id { get; set; }
    private ProductPriceDTO editingProductPrice { get; set; }
    private ProductDTO Product { get; set; } = new();
    private IEnumerable<ProductPriceDTO> ProductPrices { get; set; } = new List<ProductPriceDTO>();
    private ProductPriceDTO newProductPrice { get; set; } = new ProductPriceDTO();
    public bool IsLoading { get; set; } = true;

    public SfGrid<ProductPriceDTO> productPriceGrid;
    IEnumerable<String> SizeList = new List<String>()
    {
        "Small","Medium","Large"
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsLoading = true;
            StateHasChanged();
            Product = await _productRepository.Get(Id);
            ProductPrices = await _productPriceRepository.GetAll(Id);
            IsLoading = false;
            StateHasChanged();
        }
    }
    public async void Actionhandler(ActionEventArgs<ProductPriceDTO> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            args.Data.ProductId = Id;
            if(args.Action == "Add")
            {
                await _productPriceRepository.Create(args.Data);
                ProductPrices = await _productPriceRepository.GetAll(Id);
                productPriceGrid.Refresh();
            }
            if (args.Action == "Edit")
            {
                await _productPriceRepository.Update(args.Data);

            }
        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await _productPriceRepository.Delete(args.Data.Id);
            productPriceGrid.Refresh();
        }


     
    }

    private async Task AddProductPrice()
    {
        newProductPrice.ProductId = Id;
        newProductPrice.Size ??= "DefaultSize"; // Set a default value if it is null

        var result = await _productPriceRepository.Create(newProductPrice);

        if (result != null)
        {
            // Thêm mới thành công, cập nhật danh sách và làm mới biểu mẫu
            ProductPrices = await _productPriceRepository.GetAll(Id);
            newProductPrice = new ProductPriceDTO() { Size = "DefaultSize" }; // Reset the form
            StateHasChanged();
        }
        else
        {
    
        }
    }

    private async Task DeleteProductPrice(ProductPriceDTO productPrice)
    {
        var confirmDelete = await _jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this product price?");
       

        if (confirmDelete)
        {
            await _productPriceRepository.Delete(productPrice.Id);
            ProductPrices = await _productPriceRepository.GetAll(Id);
            StateHasChanged();
        }
    }
}    
