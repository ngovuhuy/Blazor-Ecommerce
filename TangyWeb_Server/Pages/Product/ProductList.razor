@page "/product"
@inject IProductRepository _productRepository
@inject IJSRuntime _jsRuntime
@inject IFileUpload _fileUpload
@*@attribute [Authorize]*@
@inject NavigationManager _navigationManager

<_DeleteConfirmation ConfirmationChanged="ConfirmDelete_Click" IsParentComponentProcessing="IsLoading"></_DeleteConfirmation>
<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">Product List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="/product/create" class="btn btn-primary form-control">Add New Product</a>
    </div>
</div>
<div class="col-12">
    @if (Products.Any())
    {
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>ShopFavorites</th>
                    <th>CustomerFavorites</th>
                    <th>Category</th>
                    <th>Quantity</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Products)
                {
                    <tr>
                        <td>@item.Name</td>
                        <th>
                            <input type="checkbox" disabled checked="@item.ShopFavorites" />
                        </th>
                        <th>
                            <input type="checkbox" disabled checked="@item.CustomerFavorites" />
                        </th>
                        <th>
                            @item.Category.Name
                        </th>
                        <th>
                            @item.Quantity
                        </th>
                        <td>
                            <NavLink href="@($"product/edit/{item.Id}")" class="btn btn-primary">Edit</NavLink>
                            <NavLink href="@($"product/price/{item.Id}")" class="btn btn-success">Price</NavLink>
                            <button class="btn btn-danger" @onclick="()=>HandleDelete(item.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        if (IsLoading)
        {
            <div class="text-center">
                <img src="/image/loading.gif" />
            </div>
        }
        else
        {
            <p>No Product found.</p>
        }
    }
</div>

@code {
    private IEnumerable<ProductDTO> Products { get; set; } = new List<ProductDTO>();
    public bool IsLoading { get; set; }
    private int DeleteProductId { get; set; } = 0;
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;
        if(!authState.User.Identity.IsAuthenticated)
        {
            var uri = new Uri(_navigationManager.Uri);
            _navigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}",forceLoad:true);
        }
        else
        {
            if(!authState.User.IsInRole(Tangy_Common.SD.Role_Admin))
            {
                _navigationManager.NavigateTo("/ErrorPage");
            }
        }
    }
    protected override async Task OnAfterRenderAsync(bool firsRender)
    {
        if (firsRender)
        {
            await LoadProducts();
        }
    }

    private async Task LoadProducts()
    {
        IsLoading = true;
        StateHasChanged();
        Products = await _productRepository.GetAll();
        IsLoading = false;
        StateHasChanged();
    }
    private void HandleDelete(int id)
    {
        DeleteProductId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading = true;
        if (isConfirmed && DeleteProductId != 0)
        {
            await Task.Delay(2000);
            // delete
            ProductDTO product = await _productRepository.Get(DeleteProductId);
            if (!product.ImageUrl.Contains("default.png"))
            {
                _fileUpload.DeleteFile(product.ImageUrl);
            }
            await _productRepository.Delete(DeleteProductId);
            await _jsRuntime.ToastrSuccess("Product Deleted Successfully");
            await LoadProducts();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }

}
