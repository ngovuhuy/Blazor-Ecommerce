@page "/orderList"

@inject IOrderRepository _orderRepository
@inject NavigationManager _navigationManager
@attribute [Authorize]

<div>

    <h4 class="card-title text-info">Orders List</h4>
    @if (OrderHeaders.Any())
    {
        
    
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                        Data="OrderHeaders" TItem="OrderHeaderDTO" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="Id" Filterable="false" Title="ID" Frozen="true" Width="80px" />
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="Name" Title="Name" Frozen="true" Width="80px" />
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="PhoneNumber" Title="Phone Number" Frozen="true" Width="120px" />
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="OderTotal" Title="OrderTotal" Frozen="true" Width="80px" />
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="StreetAddress" Title="Street Address" Frozen="true" Width="80px" />
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="Email" Title="Email" Frozen="true" Width="100px" />
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="OrderDate" Title="Order Date" FormatString="{0:d}" Frozen="true" Width="80px" />
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Property="Status" Title="Status" Frozen="true" Width="80px" />
                <RadzenDataGridColumn TItem="OrderHeaderDTO" Title="Details" Width="80px">
                    <Template Context="data">
                        <RadzenButton Click="(args => OrderDetails(data.Id))" Text="Details" ButtonStyle="ButtonStyle.Success"></RadzenButton>
                    </Template>
                </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
    }else
        {
            if (IsLoading)
            {
                <div class="text-center">
                    <img src="/image/loading.gif" />
                </div>
            }
        }
</div>
@if (OrderHeaders.Any())
{
    <div>
        <h4 class="card-title text-info">Orders Summary</h4>
        <table class="table table-bordered" style="border: 2px">
            <thead>
                <tr>
                    <th scope="col">Statistic</th>
                    <th scope="col">Value</th>
                </tr>
            </thead>
            <tbody>
                @{
                    var currentDate = DateTime.Now;
                    var firstDayOfMonth = new DateTime(currentDate.Year, currentDate.Month, 1);
                    var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);

                    var ordersInCurrentMonth = OrderHeaders.Where(o => o.OrderDate >= firstDayOfMonth && o.OrderDate <= lastDayOfMonth);
                    var totalOrdersInCurrentMonth = ordersInCurrentMonth.Count();
                    var totalSalesInCurrentMonth = ordersInCurrentMonth.Where(o => o.Status == "Shipped").Sum(o => o.OderTotal);
                }
                <tr>
                    <td>Total Orders in Current Month</td>
                    <td>@totalOrdersInCurrentMonth</td>
                </tr>
                <tr>
                    <td>Total Sales in Current Month</td>
                    <td>@totalSalesInCurrentMonth.ToString("N0") VNĐ</td>
                </tr>
                <tr>
                    <td>Total Orders</td>
                    <td>@OrderHeaders.Count()</td>
                </tr>
                <tr>
                    <td>Total Sales</td>
                    <td>@OrderHeaders.Where(o => o.Status == "Shipped").Sum(o => o.OderTotal).ToString("N0") VNĐ</td>
                </tr>
            </tbody>
        </table>
    </div>

}

@code {
    private IEnumerable<OrderHeaderDTO> OrderHeaders { get; set; } = new List<OrderHeaderDTO>();
    private bool IsLoading { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await LoadOrders();
            IsLoading = false;
            StateHasChanged();
        }
    }
    private async Task LoadOrders()
    {
        IsLoading = true;
        StateHasChanged();
        var Orders = await _orderRepository.GetAll();
        OrderHeaders = Orders.Select(u => u.OrderHeader);
        IsLoading = false;
        StateHasChanged();
    }

    private void OrderDetails(int id)
    {
        _navigationManager.NavigateTo("/order/details/" + id);
    }
}
